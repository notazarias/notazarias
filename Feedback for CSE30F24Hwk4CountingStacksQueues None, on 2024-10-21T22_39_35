{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "054bb976",
   "metadata": {
    "id": "KnX-kmuvv4eu",
    "notebookgrader": {
     "id": "fd8b17a637944965e435a86e50f2179bae1d0f77",
     "readonly": true
    }
   },
   "source": [
    "# Counting Stacks and Queues\n",
    "### Copyright Luca de Alfaro, 2019-21.  License: CC-BY-NC. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32ce9154",
   "metadata": {
    "id": "x7E_DLHywCHH",
    "notebookgrader": {
     "id": "79c4409f4490fca7522dd6877bff4f9bd5fd6bb1",
     "readonly": true
    }
   },
   "source": [
    "## Stacks, Queues, and Their Counting Versions\n",
    "\n",
    "A stack is a data structure with two operations: push, and pop.  Picture it as a pile of dishes sitting on a counter.  A push operation places a dish on top of the pile.  A pop operation returns the dish on top of the pile, or None if the pile is empty, that is, contains no dishes.  A \"dish\" can be any Python object. \n",
    "\n",
    "A queue is a data structure with two operations: put, and get.  Imagine it as a stack of books horizontally on a shelf.  A put operation adds the book to the left end of the books on the shelf; a get operation gets the book from the right end of the shelf.  \n",
    "\n",
    "Thus, the difference between a stack and a queue is that the stack is FILO (First In, Last Out), whereas the queue is FIFO (First In, First Out).  Elements in a stack are retrieved newest first. \n",
    "Elements in a queue are retrieved in the order they were put in, oldest first.\n",
    "\n",
    "We will implement here these data structures, with a small twist: we will also introduce _counting_ versions of them, which avoid keeping multiple identical copies of objects in a row. \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8100d783",
   "metadata": {
    "id": "_XSQV1Mw4cWa",
    "notebookgrader": {
     "id": "49e07fa490faf5fd72711d9e80c725bb75aaec05",
     "readonly": true
    }
   },
   "source": [
    "Let us begin by implementing a plain vanilla stack."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3df05796",
   "metadata": {
    "id": "00LFJ1QUwAqL",
    "notebookgrader": {
     "id": "a8c8e5545ccd919a67c43d3226b374157ed955dc",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    },
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "class Stack(object):\n",
    "    \n",
    "    def __init__(self):\n",
    "        self.stack = []\n",
    "        \n",
    "    def __repr__(self):\n",
    "        \"\"\"Defining a __repr__ function will enable us to print the \n",
    "        stack contents, and facilitate debugging.\"\"\"\n",
    "        return repr(self.stack) # Good enough.\n",
    "        \n",
    "    def push(self, x):\n",
    "        \"\"\"The \"top\" of the stack is the end of the list.\"\"\"\n",
    "        self.stack.append(x)\n",
    "        \n",
    "    def pop(self):\n",
    "        return self.stack.pop() if len(self.stack) > 0 else None\n",
    "    \n",
    "    def isempty(self):\n",
    "        return len(self.stack) == 0\n",
    "               "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "896fd721",
   "metadata": {
    "id": "uED8aSt17jE-",
    "notebookgrader": {
     "id": "e6756816b3eed1f842f12590662ef313777cda3c",
     "readonly": true
    }
   },
   "source": [
    "Let's see how this works."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "54ae3d8a",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 86
    },
    "executionInfo": {
     "elapsed": 456,
     "status": "ok",
     "timestamp": 1601586697109,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 420
    },
    "id": "SiQa7n_B6FXr",
    "notebookgrader": {
     "id": "b70a51918918f4ec5d72fd8cbeca5c9584a4828a",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    },
    "outputId": "7a2d31da-38bb-49b3-a344-72b8aa7b7b09",
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "None\n",
       "b\n",
       "a\n",
       "None"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s = Stack()\n",
    "print(s.pop())\n",
    "s.push('a')\n",
    "s.push('b')\n",
    "print(s.pop())\n",
    "print(s.pop())\n",
    "print(s.pop())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aaa4c10f",
   "metadata": {
    "id": "Lw8UF4Np8Ez5",
    "notebookgrader": {
     "id": "45bdf06d76973b852e3a1acf5df5926db560c9d8",
     "readonly": true
    }
   },
   "source": [
    "Ok!  The definition of a queue is similar. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a6dfd8bb",
   "metadata": {
    "id": "MUaMQp3n8JSn",
    "notebookgrader": {
     "id": "8e97b7240b57fec3661b5eeda2ecb4c06b1b6544",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    },
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "class Queue(object):\n",
    "    \n",
    "    def __init__(self):\n",
    "        self.queue = []\n",
    "        \n",
    "    def __repr__(self):\n",
    "        \"\"\"Defining a __repr__ function will enable us to print the \n",
    "        queue contents, and facilitate debugging.\"\"\"\n",
    "        return repr(self.queue) # Good enough.\n",
    "        \n",
    "    def add(self, x):\n",
    "        self.queue.append(x)\n",
    "        \n",
    "    def get(self):\n",
    "        # This is the only difference compared to the stack above.\n",
    "        return self.queue.pop(0) if len(self.queue) > 0 else None\n",
    "\n",
    "    def isempty(self):\n",
    "        return len(self.queue) == 0\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5c84e1e",
   "metadata": {
    "id": "5f2duj-sgPxu",
    "notebookgrader": {
     "id": "b03a5185a77ed982f9faebb2e5862c6930eea214",
     "readonly": true
    }
   },
   "source": [
    "Let's see how it works. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ecc501bf",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 86
    },
    "executionInfo": {
     "elapsed": 422,
     "status": "ok",
     "timestamp": 1601586701066,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 420
    },
    "id": "5EiB4s8MgZnu",
    "notebookgrader": {
     "id": "8bceb255b9d2fb0a01359a0c96472f53109120db",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    },
    "outputId": "918b7df5-08a7-4247-c547-0223d7351a12",
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "None\n",
       "a\n",
       "b\n",
       "None"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s = Queue()\n",
    "print(s.get())\n",
    "s.add('a')\n",
    "s.add('b')\n",
    "print(s.get())\n",
    "print(s.get())\n",
    "print(s.get())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6d12da9",
   "metadata": {
    "id": "Mn4UdJBegncY",
    "notebookgrader": {
     "id": "e74013c6bbf89b30b98ae49b19212103e6daf86e",
     "readonly": true
    }
   },
   "source": [
    "As you see, in a queue, the elements are retrieved in the same order in which they were added. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d94c9b9e",
   "metadata": {
    "id": "_rCeAwwn8kh7",
    "notebookgrader": {
     "id": "f1aa23eb0aac90c0d241c0abdb137e9442fead35",
     "readonly": true
    }
   },
   "source": [
    "Python experts might note that, for a queue, we would do better by using the [`collections.deque` class](https://docs.python.org/3.7/library/collections.html#collections.deque), rather than the list class, to make the `pop(0)` operation more efficient; in lists, it takes time proportional to the length of the list; in deques, it takes constant time.  For small lists, however, the difference is negligible.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "901c50e8",
   "metadata": {
    "id": "adOYAhqsg18w",
    "notebookgrader": {
     "id": "52667f4c359b1e22f1af3f472bbcf79c549ebe7d",
     "readonly": true
    }
   },
   "source": [
    "We now consider a use case in which we may need to put in the queue or stack many repeated copies of the same object.  For instance, assume that the queue is used to store events, and assume that some event may end up being repeated many times in a row.  As an example, the events can be \"s\", for the tick of a second, \"m\", when the minute advances, and \"h\", when the hour advances.  There will be 60 consecutive \"s\" events between any two \"m\" events, and it seems a waste to store so many consecutive identical events.  Storing many identical things in a row is akin to counting in unary notation, after all.  We would be better off storing the repeated elements only once, along with a count of the number of times they occur.  Let's develop a queue using this idea (a stack can be done similarly)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "178165e6",
   "metadata": {
    "id": "r9ozTIdI_VG6",
    "notebookgrader": {
     "id": "84672dad124179cd8e1d3c3742c55f2afc301eb0",
     "readonly": true
    }
   },
   "source": [
    "To facilitate debugging, we will implement counting queues in two fashions: first in a silly fashion, implementing their correct interface, but without implementing the smart way of storing elements with their count, and then later in the proper fashion. \n",
    "Implementing things the silly way is often useful.  For one thing, it's easier, which other things being equal is an advantage.  For another, it will let you postpone the difficult implementation, so that you can do it once you really have enough data to support the belief that repeated elements will be common.  Finally, simple  implementations are useful in testing, as you can compare the behavior of more complex and efficient implementations with that of simpler, if inefficient, ones.  You can even profile your code later, to decide whether the complication of adopting the more refined implementation was worth it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d6bede3a",
   "metadata": {
    "id": "CYGKSISb8jmK",
    "notebookgrader": {
     "id": "112481d62872ee202c5fc04c76ab57b41ba4425f",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    },
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "class NotQuiteCountingQueue(object):\n",
    "    \n",
    "    def __init__(self):\n",
    "        self.queue = []\n",
    "        \n",
    "    def __repr__(self):\n",
    "        \"\"\"Defining a __repr__ function will enable us to print the \n",
    "        queue contents, and facilitate debugging.\"\"\"\n",
    "        return repr(self.queue) # Good enough.\n",
    "        \n",
    "    def add(self, x, count=1):\n",
    "        \"\"\"When we push an element, we can push it with an optional count.\"\"\"\n",
    "        # This is a devilish trick, but if you multiply a list, you get multiple\n",
    "        # copies of it concatenated. \n",
    "        self.queue = self.queue + [x] * count\n",
    "        \n",
    "    def get(self):\n",
    "        return self.queue.pop(0) if len(self.queue) > 0 else None\n",
    "\n",
    "    def isempty(self):\n",
    "        return len(self.queue) == 0\n",
    "    \n",
    "    def length(self):\n",
    "        return len(self.queue)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c71a6e51",
   "metadata": {
    "id": "LvCTDzWIAsnh",
    "notebookgrader": {
     "id": "ce408770702872ecf2d228477562e3d7afd43287",
     "readonly": true
    }
   },
   "source": [
    "Let us see how this works."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c7cb0b95",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 156
    },
    "executionInfo": {
     "elapsed": 386,
     "status": "ok",
     "timestamp": 1601586708783,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 420
    },
    "id": "vxKzbT3RApPy",
    "notebookgrader": {
     "id": "c5511db92e9d7cbd713c5a197eb01844fa1abfa8",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    },
    "outputId": "3224f19f-be1d-4b53-a8e7-6915f1bb517b",
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "a\n",
       "b\n",
       "b\n",
       "b\n",
       "b\n",
       "b\n",
       "c\n",
       "c"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "q = NotQuiteCountingQueue()\n",
    "q.add('a')\n",
    "q.add('b', count=5)\n",
    "q.add('c', count=2)\n",
    "while not q.isempty():\n",
    "    print(q.get())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "014aea41",
   "metadata": {
    "id": "yS7b-L7cDJbQ",
    "notebookgrader": {
     "id": "79fff5f9e177cc1a940d1ca87b06e54780487dd7",
     "readonly": true
    }
   },
   "source": [
    "Let's write our smart implementation now.  In the queue, we will store pairs $(x, n)$, where $x$ is an element and $n$ is the count of the number of occurrences of $x$. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b8c7431c",
   "metadata": {
    "id": "nUsg7iS4Dah3",
    "notebookgrader": {
     "id": "3eba9c965169d3d6861dfe618f53bf6187db5822",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    },
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "class CountingQueue(object):\n",
    "    \n",
    "    def __init__(self):\n",
    "        self.queue = []\n",
    "        \n",
    "    def __repr__(self):\n",
    "        return repr(self.queue)\n",
    "    \n",
    "    def add(self, x, count=1):\n",
    "        # If the element is the same as the last element, we simply\n",
    "        # increment the count.  This assumes we can test equality of\n",
    "        # elements.\n",
    "        if len(self.queue) > 0:\n",
    "            xx, cc = self.queue[-1]\n",
    "            if xx == x:\n",
    "                self.queue[-1] = (xx, cc + count)\n",
    "            else:\n",
    "                self.queue.append((x, count))\n",
    "        else:\n",
    "            self.queue = [(x, count)]\n",
    "            \n",
    "    def get(self):\n",
    "        if len(self.queue) == 0:\n",
    "            return None\n",
    "        x, c = self.queue[0]\n",
    "        if c == 1:\n",
    "            self.queue.pop(0)\n",
    "            return x\n",
    "        else:\n",
    "            self.queue[0] = (x, c - 1)\n",
    "            return x\n",
    "        \n",
    "    def isempty(self):\n",
    "        # Since the count of an element is never 0, we can just check\n",
    "        # whether the queue is empty.\n",
    "        return len(self.queue) == 0\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "30835df8",
   "metadata": {
    "id": "mVy2fh07GRYj",
    "notebookgrader": {
     "id": "29fef0ae725e4d673e2f7958cb7e4068dc96094e",
     "readonly": true
    }
   },
   "source": [
    "Let's put this to the same test as before, printing the queue contents at each step to see what is going on."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f1a4d3c0",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 347
    },
    "executionInfo": {
     "elapsed": 555,
     "status": "ok",
     "timestamp": 1601586713285,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 420
    },
    "id": "7yHCbSSUGQcE",
    "notebookgrader": {
     "id": "5491ea8a96665e946a2b8523d20f8c37ea276b34",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    },
    "outputId": "c35e401c-c7aa-4593-dd27-cac97d82dbf4",
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('a', 1)]\n",
       "[('a', 1), ('b', 5)]\n",
       "[('a', 1), ('b', 5), ('c', 2)]\n",
       "a\n",
       "[('b', 5), ('c', 2)]\n",
       "b\n",
       "[('b', 4), ('c', 2)]\n",
       "b\n",
       "[('b', 3), ('c', 2)]\n",
       "b\n",
       "[('b', 2), ('c', 2)]\n",
       "b\n",
       "[('b', 1), ('c', 2)]\n",
       "b\n",
       "[('c', 2)]\n",
       "c\n",
       "[('c', 1)]\n",
       "c\n",
       "[]"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "q = CountingQueue()\n",
    "q.add('a')\n",
    "print(q)\n",
    "q.add('b', count=5)\n",
    "print(q)\n",
    "q.add('c', count=2)\n",
    "print(q)\n",
    "while not q.isempty():\n",
    "    print(q.get())\n",
    "    print(q)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12768b91",
   "metadata": {
    "id": "Pnx2ZyruHljK",
    "notebookgrader": {
     "id": "57f08a93f8c72a6af060c54b3ee67966bc1fdc16",
     "readonly": true
    }
   },
   "source": [
    "It works!  And notice that it works even if we add elements one by one."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "b300cd5c",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "executionInfo": {
     "elapsed": 377,
     "status": "ok",
     "timestamp": 1601586715463,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 420
    },
    "id": "fpz7IMa6Hkcg",
    "notebookgrader": {
     "id": "7ed4aa401d71c692044d245e669e19c879e1bae0",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    },
    "outputId": "a64444ff-a303-4f4f-d31c-985ddd91314f",
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('a', 10), ('b', 1), ('c', 6)]"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "q = CountingQueue()\n",
    "for i in range(10):\n",
    "    q.add('a')\n",
    "q.add('b')\n",
    "for i in range(3):\n",
    "    q.add('c', count=2)\n",
    "print(q)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "05b57071",
   "metadata": {
    "cellView": "form",
    "id": "yacFzyqTAu8q",
    "notebookgrader": {
     "id": "93aea7d6cd2660ce0d36c171bea96be4e8d31cba",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    },
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#@title Testing helper\n",
    "\n",
    "def check_equal(x, y, msg=None):\n",
    "    if x == y:\n",
    "        if msg is not None:\n",
    "            print(msg, \": Success\")\n",
    "    else:\n",
    "        if msg is None:\n",
    "            print(\"Error:\")\n",
    "        else:\n",
    "            print(\"Error in\", msg, \":\")\n",
    "        print(\"    Your answer was:\", x)\n",
    "        print(\"    Correct answer: \", y)\n",
    "    assert x == y, \"%r and %r are different\" % (x, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2294f02",
   "metadata": {
    "id": "7Ujhr4G3jock",
    "notebookgrader": {
     "id": "92c17a83565740e851ca06b02a7707d01f5ffcd3",
     "readonly": true
    }
   },
   "source": [
    "## The `__len__` Method"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0e3ba4f",
   "metadata": {
    "id": "U-9Kn0O3hVGi",
    "notebookgrader": {
     "id": "f9e5983fb2b773be2418aebf416e3c8ef950cc7b",
     "readonly": true
    }
   },
   "source": [
    "If you want to take the length of an object, as in \n",
    "\n",
    "    len(someobject)\n",
    "\n",
    "then `someobject` must have a `__len__` method, which should return the length. \n",
    "Here is a wrong implementation, which always returns length 2.  The implementation is wrong, but it shows how `__len__` should be implemented."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "8971dbb7",
   "metadata": {
    "id": "La1ezFvWh17k",
    "notebookgrader": {
     "id": "e1c66d9efa686de169fc804a9b8a777176808a8e",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    },
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# We define a function... \n",
    "def wronglength(self):\n",
    "    return 2\n",
    "\n",
    "#... and we assign it to the __len__ methods.\n",
    "CountingQueue.__len__ = wronglength"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cfb39577",
   "metadata": {
    "id": "Suefj5D0iFJr",
    "notebookgrader": {
     "id": "5cce6f5f67fd505af7aa7c7271d305bdcaaaf0f5",
     "readonly": true
    }
   },
   "source": [
    "What we did before is a bit un-orthodox.  We should have really added the definition of `__len__` into the declaration of the class, like this: \n",
    "\n",
    "    class CountingQueue(object):\n",
    "\n",
    "        def __init__(self):\n",
    "            self.queue = []\n",
    "\n",
    "        # ... etc etc...\n",
    "\n",
    "        def __len__(self):\n",
    "            return 2\n",
    "\n",
    "In these class notebooks, however, to avoid redefining classes from scratch all the time, we will often use the trick of defining a function, and then assigning it to a class method. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e2bd81d1",
   "metadata": {
    "id": "qxWlzfxTjXil",
    "notebookgrader": {
     "id": "2eb14c808750215fb04cdb53f9a5cfb947f0d6f3",
     "readonly": true
    }
   },
   "source": [
    "**Exercise:** Define a correct function `__len__`, which returns the number of elements in a counting queue. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "62251382",
   "metadata": {
    "executionInfo": {
     "elapsed": 175,
     "status": "ok",
     "timestamp": 1729550153589,
     "user": {
      "displayName": "Azarias Ashenafi",
      "userId": "07661282689053385655"
     },
     "user_tz": 420
    },
    "id": "ASPcU9-L-uQ3",
    "notebookgrader": {
     "id": "0715959ba149271a84830bff45752743b11522c4",
     "is_solution": true,
     "is_tests": false,
     "readonly": false
    },
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#@title Exercise: implement `__len__` for a counting queue\n",
    "\n",
    "def countingqueue_len(self):\n",
    "    \"\"\"Returns the number of elements in the queue.\"\"\"\n",
    "    ### YOUR SOLUTION HERE\n",
    "    length = 0\n",
    "    for item, count in self.queue:\n",
    "        length += count\n",
    "    return length\n",
    "\n",
    "# This is a way to add a method to a class once the class\n",
    "# has already been defined.\n",
    "CountingQueue.__len__ = countingqueue_len"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "576a5bd4",
   "metadata": {
    "cellView": "form",
    "id": "WAC-Wj9b_oKW",
    "notebookgrader": {
     "id": "89733982fc9250483f286f17ee1b7bdd52404e9f",
     "is_solution": false,
     "is_tests": true,
     "points_earned": 10,
     "readonly": true,
     "test_points": 10
    },
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<b>Tests passed, you earned 10/10 points</b>"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Tests 10 points: `__len__`\n",
    "\n",
    "q = CountingQueue()\n",
    "for i in range(10):\n",
    "    q.add('a')\n",
    "q.add('b')\n",
    "for i in range(3):\n",
    "    q.add('c', count=2)\n",
    "check_equal(len(q), 17)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "316893f6",
   "metadata": {
    "id": "XAlYMWRj-S53",
    "notebookgrader": {
     "id": "f47c544e4d83a9be41394c660ba2ebfe25c0e53c",
     "readonly": true
    }
   },
   "source": [
    "**Exercise:** Implement counting stacks."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef82653a",
   "metadata": {
    "id": "GsFj4rTTIkk9",
    "notebookgrader": {
     "id": "bb1012f6715f7cf7e6b82001a35fe2f6fca4f436",
     "readonly": true
    }
   },
   "source": [
    "## The `__iter__` Method\n",
    "\n",
    "We would like to be able to have a way of iterating over elements in our counting queue.  \n",
    "This can be used, for instance, to print them, or to process the elements in some way. \n",
    "\n",
    "Precisely, we would like to have a way of writing, for a counting queue `q`:\n",
    "\n",
    "    for el in q:\n",
    "        print el\n",
    "\n",
    "and we would like this to print all queue elements, in order. \n",
    "\n",
    "The way to achieve this is to define an `__iter__` method that acts as a generator for the elements. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7feeb70a",
   "metadata": {
    "id": "nWEHoOz7BVRU",
    "notebookgrader": {
     "id": "cb40d59542c70aa4f8f91d88e3324b7a71cb3ada",
     "readonly": true
    }
   },
   "source": [
    "Doing this for a normal (non-counting) queue is easy.  Note how we are again using our hacky syntax for adding a method post-definition to a class. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "8b879f20",
   "metadata": {
    "id": "mZxPxPVclB4O",
    "notebookgrader": {
     "id": "d5c59fefcc76d361963f71a68690a3c3eb728529",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    },
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def queue_iter_elements(self):\n",
    "    for el in self.queue:\n",
    "        yield el\n",
    "\n",
    "Queue.__iter__ = queue_iter_elements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "b3e44467",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 69
    },
    "executionInfo": {
     "elapsed": 441,
     "status": "ok",
     "timestamp": 1601587114676,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 420
    },
    "id": "Ni-x2WzclPov",
    "notebookgrader": {
     "id": "d65a46ac7e1c0799222cba6e8044c112a1dd3f89",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    },
    "outputId": "b843b66d-75cd-4ec1-959b-a8714941749d",
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "a\n",
       "b\n",
       "c"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "normal_queue = Queue()\n",
    "normal_queue.add('a')\n",
    "normal_queue.add('b')\n",
    "normal_queue.add('c')\n",
    "\n",
    "for el in normal_queue:\n",
    "    print(el)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "abe5fd47",
   "metadata": {
    "id": "gDVOvA2blwmQ",
    "notebookgrader": {
     "id": "535326add9bf2c94df3359b2eb0dcecaaee23fab",
     "readonly": true
    }
   },
   "source": [
    "Note that we cannot use our `queue_iter_elements` on a counting queue; we would get a wrong result: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "9914ec36",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 104
    },
    "executionInfo": {
     "elapsed": 396,
     "status": "ok",
     "timestamp": 1601587119034,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 420
    },
    "id": "ot4x-mKwl56X",
    "notebookgrader": {
     "id": "4abeced9da1478f4584d2500682bfd100b78c6dd",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    },
    "outputId": "55fa99e2-5a04-4a68-e8d5-44499520403a",
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0, 2)\n",
       "(1, 2)\n",
       "(2, 2)\n",
       "(3, 2)\n",
       "(4, 2)"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CountingQueue.__iter__ = queue_iter_elements\n",
    "\n",
    "q = CountingQueue()\n",
    "for i in range(5):\n",
    "    q.add(i)\n",
    "    q.add(i)\n",
    "for el in q:\n",
    "    print(el)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d707c2a4",
   "metadata": {
    "id": "_vrpziHolmMx",
    "notebookgrader": {
     "id": "17146f6dca1b71782fd3af40927f3dc4ed1e8614",
     "readonly": true
    }
   },
   "source": [
    "**Exercise:** Write an iterator for counting queue that correctly iterates over the element in the counting queue."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "ea9ea78e",
   "metadata": {
    "executionInfo": {
     "elapsed": 184,
     "status": "ok",
     "timestamp": 1729550296423,
     "user": {
      "displayName": "Azarias Ashenafi",
      "userId": "07661282689053385655"
     },
     "user_tz": 420
    },
    "id": "RsdoChVJCdiN",
    "notebookgrader": {
     "id": "0c77aceb6aee9878c2aa594fc751b5ebfe413db1",
     "is_solution": true,
     "is_tests": false,
     "readonly": false
    },
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#@title Exercise: Write an iterator for CountingQueue\n",
    "\n",
    "# Note: it can be done elegantly in 3 lines of code.\n",
    "\n",
    "def countingqueue_iter_elements(self):\n",
    "    \"\"\"Iterates through all the elements of the queue,\n",
    "    without removing them.\"\"\"\n",
    "    ### YOUR SOLUTION HERE\n",
    "    for item, count in self.queue:\n",
    "        for i in range(count):\n",
    "            yield item\n",
    "\n",
    "\n",
    "\n",
    "CountingQueue.__iter__ = countingqueue_iter_elements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "97a29b97",
   "metadata": {
    "cellView": "form",
    "id": "Ba6_LssmDnBd",
    "notebookgrader": {
     "id": "e82c0d43105980906686b860c5817dae1ca1c051",
     "is_solution": false,
     "is_tests": true,
     "points_earned": 10,
     "readonly": true,
     "test_points": 10
    },
    "vscode": {
     "languageId": "python"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<b>Tests passed, you earned 10/10 points</b>"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Tests 10 points: for `CountingQueue.__iter__`\n",
    "\n",
    "q = CountingQueue()\n",
    "for i in range(10):\n",
    "    q.add('a')\n",
    "q.add('b')\n",
    "for i in range(3):\n",
    "    q.add('c', count=2)\n",
    "l1 = [x for x in q]\n",
    "l2 = []\n",
    "while not q.isempty():\n",
    "    l2.append(q.get())\n",
    "check_equal(l1, l2)\n"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 5
}