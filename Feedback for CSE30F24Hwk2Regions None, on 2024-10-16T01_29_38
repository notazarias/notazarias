{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "31938d3b",
   "metadata": {
    "id": "sZIoWrYdJdez",
    "notebookgrader": {
     "id": "737b207488694a4d41ea986b58d562e19ab98356",
     "readonly": true
    }
   },
   "source": [
    "# Regions\n",
    "\n",
    "### Â© Luca de Alfaro, 2018-21, [CC-BY_NC License](http://creativecommons.org/licenses/by-nc-nd/4.0/)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f175829f",
   "metadata": {
    "id": "PKJ_D6LFmfiZ",
    "notebookgrader": {
     "id": "03502327acf87a9ac20b38c0f5b2d4a1596cbbc9",
     "readonly": true
    }
   },
   "source": [
    "In this module, we will write code to represent regions of space.  We will represent a _region_ as the union of rectangles whose sides are parallel to the Cartesian axes.  Of course, this does not suffice to represent all possible regions of space, but by using lots of small rectangles, we can at least approximate most (continuous, etc) regions. \n",
    "\n",
    "Since a region is the union of rectangles, let us turn our attention to rectangles. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b815d700",
   "metadata": {
    "id": "_Ub7cVHumfi6",
    "notebookgrader": {
     "id": "c2707b773aaadfdbea650cbc6189090d984b1d8a",
     "readonly": true
    }
   },
   "source": [
    "## Rectangles\n",
    "\n",
    "We need to represent rectangles whose sides, and edges, are parallel to the axes of the Cartesian space. \n",
    "What is a good representation for a rectangle? \n",
    "\n",
    "Let us consider informally the 2D case first. \n",
    "One of the most obvious representations for such a rectangle consists in representing it by its four vertices, represented as $(x, y)$ coordinate pairs.  The following is a possibility:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c4d75dd3",
   "metadata": {
    "executionInfo": {
     "elapsed": 1002,
     "status": "ok",
     "timestamp": 1613086466670,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 480
    },
    "id": "VZDo8Rd2mfi8",
    "notebookgrader": {
     "id": "25604ab9c42ae7400aa2172c1710bccf9cbf3842",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "class NaiveRectangle1(object):\n",
    "    \n",
    "    def __init__(self, x0, y0, x1, y1, x2, y2, x3, y3):\n",
    "        self.x0 = x0 # Lower left\n",
    "        self.x1 = x1 # Upper left\n",
    "        self.x2 = x2 # Upper right\n",
    "        self.x3 = x3 # Lower right\n",
    "        self.y0 = y0 # Lower left\n",
    "        self.y1 = y1 # Upper left\n",
    "        self.y2 = y2 # Upper right\n",
    "        self.y3 = y3 # Lower right"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2fb05839",
   "metadata": {
    "id": "zGTCzOR7mfjA",
    "notebookgrader": {
     "id": "4d25846d983a8469b69f1a1a6498d16c0cda6add",
     "readonly": true
    }
   },
   "source": [
    "This representation suffers from a first immediate problem: in a 2D rectangle with sides parallel to the edges, there are only 4 independent numbers, not 8!  In particular, we see that it must be `x0 == x3`, and `x1 == x2`, and `y0 == y1`, and `y2 = y3`. \n",
    "This suggests keeping only the two opposite corners, for instance, lower left and upper right:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "43bc8a4f",
   "metadata": {
    "executionInfo": {
     "elapsed": 1267,
     "status": "ok",
     "timestamp": 1613086466944,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 480
    },
    "id": "Yl-uXSdomfjB",
    "notebookgrader": {
     "id": "f367b7c95b4521d6c9d76a8f37b98be22ae25c8e",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "class NaiveRectangle2(object):\n",
    "    \n",
    "    def __init__(self, xll, yll, xur, yur):\n",
    "        self.xll = x0 # Lower left\n",
    "        self.yll = yll # Lower left\n",
    "        self.xur = xur # Upper right\n",
    "        self.yur = yur# Upper right\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c16d8684",
   "metadata": {
    "id": "fmSzx_GSmfjI",
    "notebookgrader": {
     "id": "fbf9f5618676e5bce6c950dfc21b22ce46c35725",
     "readonly": true
    }
   },
   "source": [
    "This representation, based on \"selected vertices\", is a plausible representation for 2D rectangles, but I argue not an optimal one.  There are two problems with it. \n",
    "\n",
    "First, it is not clear how to generalize it to multiple dimensions.  In 3D, for instance, two vertices are not enough, four are too many, and yet, one can check that no set of three vertices of a rectangle suffices to uniquely identify the rectangle.  This lack of generalizability should make us suspicious that representing rectangles in terms of a reduced set of their vertices is not a good idea. \n",
    "\n",
    "Second, even if we limit ourselves to 2D, the representation in terms of opposite vertices does not make it easy to implement the operations we need.  At a minimum, we need to compute operations between rectangles such as intersection and difference, so we can subtract boxes from the empty space.  Yet, there are many ways in which for example rectangles can intersect: \n",
    "\n",
    "* One rectangle contains a vertex of the other. \n",
    "* One rectangle is completely contained the other. \n",
    "* One rectangle has a face in the other rectangle. \n",
    "\n",
    "and perhaps more.  If we try to hard-code this for 3D rectangles, implementing operations such as intersection, and difference, might result in very cumbersome case analysis.  \n",
    "\n",
    "Whenever things turn complicated, it is a good idea to wonder whether there is perhaps some other way of thinking at the problem, which is perhaps initially less apparent, but that can lead to a much simpler treatment.  In this case, there is: it is _intervals_.  \n",
    "\n",
    "A 1D rectangle is simply an interval.  We can think of a 2D rectangle, rather than as a collection of vertices, as the intersection of two intervals: one for the x-axis, and one for the y-axis.  Similarly, a 3D rectangle can be thought of as the intersection of three intervals, on the x, y, and z axes.  To compute the intersection of two rectangles, we just need to compute the intersection of their intervals on the respective axes.  Thus, intervals provide a simple representation that generalizes well to multiple dimensions. \n",
    "\n",
    "We start building our representation from intervals.  We then use intersection of intervals to represent rectangles, and unions rectangels to represent regions of space. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a8315cd",
   "metadata": {
    "id": "6sQh-p9ZmzYB",
    "notebookgrader": {
     "id": "f2f7e529f147bb48acf499739185475604be8382",
     "readonly": true
    }
   },
   "source": [
    "## Intervals\n",
    "\n",
    "An interval is defined by its two endpoints.  We keep them sorted, which will make it (a lot) easier to operate on them. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "eb5ba24c",
   "metadata": {
    "executionInfo": {
     "elapsed": 1266,
     "status": "ok",
     "timestamp": 1613086466945,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 480
    },
    "id": "PRXg7gsBeA2a",
    "notebookgrader": {
     "id": "3d31de0412f2c9a739030e8595f3328600c144c9",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "class Interval(object):\n",
    "    \n",
    "    def __init__(self, x0, x1):\n",
    "        # Sorts the endpoints, to ensure that x0 <= x1. \n",
    "        x0, x1 = (x0, x1) if x0 < x1 else (x1, x0)\n",
    "        assert x0 < x1 # No point intervals. \n",
    "        self.x0 = x0\n",
    "        self.x1 = x1\n",
    "        \n",
    "    @property\n",
    "    def length(self):\n",
    "        return self.x1 - self.x0\n",
    "    \n",
    "    def endpoints(self):\n",
    "        return (self.x0, self.x1)\n",
    "    \n",
    "    def __getitem__(self, i):\n",
    "        \"\"\"Alternative way of accessing endpoints.\"\"\"\n",
    "        if i == 0:\n",
    "            return self.x0 \n",
    "        elif i == 1:\n",
    "            return self.x1 \n",
    "        raise KeyError()\n",
    "\n",
    "    def __repr__(self):\n",
    "        return \"[{},{}]\".format(self.x0, self.x1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef233efa",
   "metadata": {
    "id": "qDCRAoqvS2f_",
    "notebookgrader": {
     "id": "c61f4d2ab095e5782f326a18f52f6e27cdd52057",
     "readonly": true
    }
   },
   "source": [
    "The main operations we need on intervals, to do anything interesting, are: \n",
    "\n",
    "* **Intersection.** Given two intervals `i` and `j`, we want to define `__and__` for an interval so that `i && j` will be either `None`, if `i` and `j` have no intersection, or the interval corresponding to the intersection of `i` and `j`. \n",
    "\n",
    "* **Union.** The union of two intervals is not necessarily an interval; it could also be _two_ intervals, if the original intervals are disjoint and there is a gap in between.  Thus, we define `__sub__` so that `i - j` returns a _list_ consisting of 1 or 2 intervals. \n",
    "\n",
    "* **Difference.** The difference `i - j` is the portion of `i` that is not in `j`.  The result is a _list_ of intervals, containing 0 intervals (if `j` includes `i`), one interval (if `j` does not overlap `i`, or if it overlaps only from one side of `i`), or two intervals (if `j` falls in the middle of `i`). \n",
    "\n",
    "* **Equality.** Two intervals are equal if, well, they are equal. \n",
    "\n",
    "* **Membership.** We test for a point belonging to an interval. \n",
    "\n",
    "In defining these operations, we disregard isolated points, and we blur the distinction between open and closed intervals.  After all, we only care about representing regions of space, and so isolated points and things that have no extension, or no volume, are not a concern of ours.  So for instance, if we subtract the interval $[3, 5]$ from $[0, 4]$, the result will be simply the interval $[4, 5]$: we do not track whether the interval is open or closed at 5.  Likewise, point-wise intervals such as $[5, 5]$ are simply not considered. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "258968dd",
   "metadata": {
    "id": "CeEclrZeVBp1",
    "notebookgrader": {
     "id": "37e5780f9e5ce5b6bf02a86979fa6ea202bbfa07",
     "readonly": true
    }
   },
   "source": [
    "### Equality\n",
    "\n",
    "Let us start by implementing equality.  We leave this to you. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "97a45d6f",
   "metadata": {
    "executionInfo": {
     "elapsed": 529,
     "status": "ok",
     "timestamp": 1729041386320,
     "user": {
      "displayName": "Azarias Ashenafi",
      "userId": "07661282689053385655"
     },
     "user_tz": 420
    },
    "id": "v1OxTsxdSovZ",
    "notebookgrader": {
     "id": "936c44150e285a9f09fd772a2b272368be73f88e",
     "is_solution": true,
     "is_tests": false,
     "readonly": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#@title Defining Equality\n",
    "\n",
    "def interval_equality(self, other):\n",
    "    \"\"\"Return True iff the intervals self and other are equal, and False otherwise.\"\"\"\n",
    "    # Remember, other is not guaranteed to be an Interval.\n",
    "    if not isinstance(other, Interval):\n",
    "        return False\n",
    "    ### YOUR SOLUTION HERE\n",
    "    return self.x0 == other.x0 and self.x1 == other.x1\n",
    "\n",
    "\n",
    "Interval.__eq__ = interval_equality"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "42b68aee",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 1239,
     "status": "ok",
     "timestamp": 1613086466945,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 480
    },
    "id": "8yy2QefuVmLn",
    "notebookgrader": {
     "id": "c0b6709feb54e8fec068af52d275424ae86326d3",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    },
    "outputId": "6a7782fc-16c0-4d2d-b0e6-8875a78e12f2"
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "i = Interval(3, 5)\n",
    "j = Interval(4, 5)\n",
    "i"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "2133692b",
   "metadata": {
    "executionInfo": {
     "elapsed": 1237,
     "status": "ok",
     "timestamp": 1613086466945,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 480
    },
    "id": "o6Dl6covVsiV",
    "notebookgrader": {
     "id": "9ee31236c0f77f8f93e2e6a07ef4d42013389e69",
     "is_solution": false,
     "is_tests": true,
     "points_earned": 5,
     "readonly": true,
     "test_points": 5
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<b>Tests passed, you earned 5/5 points</b>"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Tests 5 points. \n",
    "\n",
    "assert i != j\n",
    "assert Interval(5, 7) == Interval(5, 7)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b77498d",
   "metadata": {
    "id": "lfB0GWs6V84f",
    "notebookgrader": {
     "id": "d9208a217e1f1b8e316f700f0f1ad2546a68edad",
     "readonly": true
    }
   },
   "source": [
    "### Union\n",
    "\n",
    "We define union for you, to give you an example. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c6d94e69",
   "metadata": {
    "executionInfo": {
     "elapsed": 1236,
     "status": "ok",
     "timestamp": 1613086466946,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 480
    },
    "id": "xLhnLYgJSoec",
    "notebookgrader": {
     "id": "ad84408813efe2ec6f54ceac97fe26577213ff87",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def interval_or(self, other):\n",
    "    \"\"\"Union of self and other.  Returns a list of 1 or 2 non-overlapping intervals.\"\"\"\n",
    "    if self.x1 < other.x0 or other.x1 < self.x0:\n",
    "        # Disjoint\n",
    "        return [self, other]\n",
    "    else:\n",
    "        # Have intersection, merge them. \n",
    "        return [Interval(min(self.x0, other.x0), max(self.x1, other.x1))]\n",
    "\n",
    "Interval.__or__ = interval_or"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "d5fd92ed",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 1215,
     "status": "ok",
     "timestamp": 1613086466946,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 480
    },
    "id": "LaGjOz9_WZgp",
    "notebookgrader": {
     "id": "84f515f0774a6da85d4b1a71648560bef54038e9",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    },
    "outputId": "6d4d5007-d822-41a3-c98e-229a0e54c9a9"
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Interval(3, 5) | Interval(7, 10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "35fd75b5",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 1196,
     "status": "ok",
     "timestamp": 1613086466947,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 480
    },
    "id": "jkO7kVMkWmiM",
    "notebookgrader": {
     "id": "3a8dd1f37b868442c6bbe001b26dd67235c24c3d",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    },
    "outputId": "8664da9e-0e16-4407-bfd1-5fbca576f1e8"
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Interval(3, 5) | Interval(4, 10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "63c5c5e0",
   "metadata": {
    "id": "l2Iy4IZNXDeg",
    "notebookgrader": {
     "id": "b757b132ba2871a0a37daee11d5bb925f2a67b34",
     "readonly": true
    }
   },
   "source": [
    "## Intersection\n",
    "\n",
    "The intersection of two intervals `i` and `j` consists either of a single interval, or `None`, if the two intervals have no intersection.  We leave it to you to implement it. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "b5365807",
   "metadata": {
    "executionInfo": {
     "elapsed": 3,
     "status": "ok",
     "timestamp": 1729041443651,
     "user": {
      "displayName": "Azarias Ashenafi",
      "userId": "07661282689053385655"
     },
     "user_tz": 420
    },
    "id": "uu-w9wJVSoSU",
    "notebookgrader": {
     "id": "5d60bdbd0433252aa01e7581398021152c9f0df2",
     "is_solution": true,
     "is_tests": false,
     "readonly": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#@title Interval intersection\n",
    "\n",
    "def interval_and(self, other):\n",
    "    \"\"\"Intersection; returns an interval, or None.\"\"\"\n",
    "    ### YOUR SOLUTION HERE\n",
    "    if self.x1 < other.x0 or other.x1 < self.x0:\n",
    "        return None\n",
    "    start = max(self.x0, other.x0)\n",
    "    # finds the max of the 2 recs\n",
    "    end = min(self.x1, other.x1)\n",
    "    #finds min fo 2 recs\n",
    "    return Interval(start, end)\n",
    "\n",
    "\n",
    "Interval.__and__ = interval_and"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "ffbeb8ff",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 1425,
     "status": "ok",
     "timestamp": 1613086467202,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 480
    },
    "id": "y5qYoGwQXoYn",
    "notebookgrader": {
     "id": "df6381fe861f78064135dd9db34091668767a631",
     "is_solution": false,
     "is_tests": true,
     "points_earned": 10,
     "readonly": true,
     "test_points": 10
    },
    "outputId": "e2ca6cb1-7fa1-4765-9ba6-b105d836bd4d"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<b>Tests passed, you earned 10/10 points</b>"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Tests 10 points. \n",
    "\n",
    "assert Interval(3, 10) & Interval(6, 20) == Interval(6, 10)\n",
    "assert Interval(3, 4) & Interval(5, 6) is None"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9b986f8",
   "metadata": {
    "id": "4FVHdhRPfNzO",
    "notebookgrader": {
     "id": "21f0e81b5c15cab8f7134266f9a74fd0cce56556",
     "readonly": true
    }
   },
   "source": [
    "### Membership\n",
    "\n",
    "Given an interval `i`, and a floating point number `x`, we can write a method `__contains__` of an interval, which checks if `x` belongs to the interval.  In this way, writing `x in i` will return `True` if `x` belongs to `i`, and `False` otherwise. For the purpose of this method, you can consider an interval closed, so that \n",
    "\n",
    "    3 in Interval(3, 5)\n",
    "\n",
    "returns `True`. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a15d54f3",
   "metadata": {
    "executionInfo": {
     "elapsed": 591,
     "status": "ok",
     "timestamp": 1729041459750,
     "user": {
      "displayName": "Azarias Ashenafi",
      "userId": "07661282689053385655"
     },
     "user_tz": 420
    },
    "id": "AFpuvBY0hQle",
    "notebookgrader": {
     "id": "78364d556269e731df560a71cc716e50dc9acd16",
     "is_solution": true,
     "is_tests": false,
     "readonly": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#@title Membership of a point in an interval\n",
    "\n",
    "def interval_contains(self, x):\n",
    "    ### YOUR SOLUTION HERE\n",
    "    return self.x0 <= x <= self.x1\n",
    "\n",
    "\n",
    "Interval.__contains__ = interval_contains"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "38d6fc01",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 1400,
     "status": "ok",
     "timestamp": 1613086467203,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 480
    },
    "id": "_Yifqdd6hppM",
    "notebookgrader": {
     "id": "84e21114ab7b6d0001f516bf6cd2a525987dfb4f",
     "is_solution": false,
     "is_tests": true,
     "points_earned": 10,
     "readonly": true,
     "test_points": 10
    },
    "outputId": "efdd5630-7ac5-4afd-a679-e4c98b1e0928"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<b>Tests passed, you earned 10/10 points</b>"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Tests 10 points. \n",
    "\n",
    "assert 3 in Interval(3, 5)\n",
    "assert not (1 in Interval(3, 5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dad57e3c",
   "metadata": {
    "id": "ZjEKuy5KWwIR",
    "notebookgrader": {
     "id": "2bfb6d132ad9238ebbb25f888e897ddfe5ba6858",
     "readonly": true
    }
   },
   "source": [
    "## Difference\n",
    "\n",
    "For intervals `i`, `j`, the difference of `i - j` consists of 0, 1, or 2 non-overlapping intervals.  Again, we leave the implementation to you. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "ff270346",
   "metadata": {
    "executionInfo": {
     "elapsed": 271,
     "status": "ok",
     "timestamp": 1729041483569,
     "user": {
      "displayName": "Azarias Ashenafi",
      "userId": "07661282689053385655"
     },
     "user_tz": 420
    },
    "id": "Z2-YmA-2Snlo",
    "notebookgrader": {
     "id": "a8be06bac5f3b149cd24db19d930ffff0dc9621c",
     "is_solution": true,
     "is_tests": false,
     "readonly": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#@title Interval difference\n",
    "\n",
    "def interval_sub(self, other):\n",
    "    \"\"\"Subtracts from this interval the interval other, returning a possibly\n",
    "    empty list of intervals.\"\"\"\n",
    "    ### YOUR SOLUTION HERE\n",
    "    if self.x1 < other.x0 or other.x1 < self.x0:\n",
    "        return [self]\n",
    "    elif other.x0 > self.x0 and other.x1 <self.x1:\n",
    "        return [Interval(self.x0, other.x0), Interval(other.x1, self.x1)]\n",
    "    elif other.x0 <= self.x1 and other.x0> self.x0 and other.x1 >= self.x1:\n",
    "        return [Interval(self.x0, other.x0)]\n",
    "    elif other.x1>= self.x0 and other.x1 <self.x1 and other.x0 <= self.x0:\n",
    "        return [Interval(other.x1, self.x1)]\n",
    "    else:\n",
    "        return []\n",
    "\n",
    "Interval.__sub__ = interval_sub"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "4ba174c3",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 1358,
     "status": "ok",
     "timestamp": 1613086467204,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 480
    },
    "id": "_NrBKabRowYE",
    "notebookgrader": {
     "id": "e4b3cd38951706e71a323e8393e21d6f67fc6a0d",
     "is_solution": false,
     "is_tests": true,
     "points_earned": 10,
     "readonly": true,
     "test_points": 10
    },
    "outputId": "f8220c15-4bf2-4550-aa78-bee369810983"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<b>Tests passed, you earned 10/10 points</b>"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Tests 10 points. \n",
    "\n",
    "assert Interval(4, 6) - Interval(5, 8) == [Interval(4, 5)]\n",
    "assert Interval(0, 10) - Interval(4, 5) == [Interval(0, 4), Interval(5, 10)]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "549b456c",
   "metadata": {
    "id": "wBkW5I-Imfja",
    "notebookgrader": {
     "id": "1520f21d50d41119a2bd1e51b8cfa3fc330a6094",
     "readonly": true
    }
   },
   "source": [
    "The obvious problem with this implementation is that intervals are not closed under union or difference: the union of two intervals cannot be expressed as a single interval.  To obtain a type that is closed under union and difference, we should consider _unions of intervals_ instead.  The only reason we do not do it here is that intervals are only a temporary stepping stone for us to the definition of rectangles and regions, and so, we do not find it worthwhile to define a class that is closed under these operations.  The class Region, on the other hand, will be closed under these operations.\n",
    "\n",
    "**Exercise:** Define an IntervalSet class, consisting of (finite!) unions of intervals, and define the union, difference, intersection, and len (total length) operations for it."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1f7b17f",
   "metadata": {
    "id": "OVcJ0gXsu7OI",
    "notebookgrader": {
     "id": "1e8db36d13e8be523fe4793ec7f7b4817d609bb6",
     "readonly": true
    }
   },
   "source": [
    "Another way of testing this code is the following.  Let's generate many random intervals $I_1$ and $I_2$.  Denoting with $-$ the difference of intervals and with $\\cap$ their intersection, and denoting the length of an interval $I$ by $l(I)$, the following invariant must be true: \n",
    "\n",
    "$$\n",
    "l(I_1 - I_2) + l(I_2 - I_1) + 2l(I_1 \\cap I_2) = l(I_1) + l(I_2)\n",
    "$$\n",
    "\n",
    "To verify this, let us start by defining this total length function precisely.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "c5d75f81",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 1316,
     "status": "ok",
     "timestamp": 1613086467205,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 480
    },
    "id": "w95QGRc3qW3a",
    "notebookgrader": {
     "id": "f9eb77472c663226079cc9fee3d16431aac9d793",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    },
    "outputId": "f40412e9-9b54-4b8a-f562-fc7c93813454"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0\n",
       "i1: 1\n",
       "i2: 2\n",
       "i1+i2: 3"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "def total_length(x):\n",
    "    if x is None:\n",
    "        return 0.\n",
    "    elif type(x) == list:\n",
    "        return np.sum([i.length for i in x])\n",
    "    else:\n",
    "        return x.length\n",
    "    \n",
    "print(total_length(None))\n",
    "i1 = Interval(0, 1)\n",
    "i2 = Interval(3, 5)\n",
    "print(\"i1:\", total_length(i1))\n",
    "print(\"i2:\", total_length(i2))\n",
    "print(\"i1+i2:\", total_length([i1, i2]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "cbadfab9",
   "metadata": {
    "executionInfo": {
     "elapsed": 1314,
     "status": "ok",
     "timestamp": 1613086467205,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 480
    },
    "id": "4dwGD1KAwHQG",
    "notebookgrader": {
     "id": "28be5f7d0d73752d30e8226f313e3404d5f8b0c1",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import random\n",
    "    \n",
    "def test_random():\n",
    "    i1 = Interval(random.random(), random.random())\n",
    "    i2 = Interval(random.random(), random.random())\n",
    "    d1 = i1 - i2\n",
    "    d2 = i2 - i1\n",
    "    inters = i1 & i2\n",
    "    assert (total_length(d1) + total_length(d2) + 2. * total_length(inters)\n",
    "        == i1.length + i2.length)\n",
    "    \n",
    "for _ in range(100):\n",
    "    test_random()\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0544f284",
   "metadata": {
    "id": "lQW7JdhVcqGM",
    "notebookgrader": {
     "id": "39042f2da4317af23aaf9db70207ebb4e8f3ea92",
     "readonly": true
    }
   },
   "source": [
    "### Rectangles\n",
    "\n",
    "Let us now develop a representation of a rectangle, in terms of intersection of intervals.  We will phrase the definition in such a way that it works in any number of dimensions, storing the intervals as a list, as opposed to (say) storing the three intervals separately for 3D."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "209013e6",
   "metadata": {
    "executionInfo": {
     "elapsed": 1313,
     "status": "ok",
     "timestamp": 1613086467205,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 480
    },
    "id": "InI6P4mXxJHo",
    "notebookgrader": {
     "id": "254318fef6c045d373d44ec3583a7b9bf4081082",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import string\n",
    "\n",
    "class Rectangle(object):\n",
    "    \n",
    "    def __init__(self, *intervals, name=None):\n",
    "        \"\"\"A rectangle is initialized with a list, whose elements are \n",
    "        either Interval, or a pair of numbers. \n",
    "        It would be perhaps cleaner to accept only list of intervals, \n",
    "        but specifying rectangles via a list of pairs, with each pair \n",
    "        defining an interval, makes for a concise shorthand that will be\n",
    "        useful in tests. \n",
    "        Every rectangle has a name, used to depict it. \n",
    "        If no name is provided, we invent a random one.\"\"\"\n",
    "        self.intervals = []\n",
    "        for i in intervals:\n",
    "            self.intervals.append(i if type(i) == Interval else Interval(*i))\n",
    "        # I want each rectangle to have a name.\n",
    "        if name is None:\n",
    "            self.name = ''.join(\n",
    "                random.choices(string.ascii_letters + string.digits, k=8))\n",
    "        else:\n",
    "            self.name = name\n",
    "            \n",
    "    def __repr__(self):\n",
    "        \"\"\"Function used to print a rectangle.\"\"\"\n",
    "        s = \"Rectangle \" + self.name + \": \"\n",
    "        s += repr([(i.x0, i.x1) for i in self.intervals])\n",
    "        return s\n",
    "    \n",
    "    def clone(self, name=None):\n",
    "        \"\"\"Returns a clone of itself, with a given name.\"\"\"\n",
    "        name = name or self.name + \"'\"\n",
    "        return Rectangle(*self.intervals, name=name)\n",
    "    \n",
    "    def __len__(self):\n",
    "        \"\"\"Returns the number of dimensions of the rectangle\n",
    "        (not the length of the edges).  This is used with \n",
    "        __getitem__ below, to get the interval along a dimension.\"\"\"\n",
    "        return len(self.intervals)\n",
    "    \n",
    "    def __getitem__(self, n):\n",
    "        \"\"\"Returns the interval along the n-th dimension\"\"\"\n",
    "        return self.intervals[n]\n",
    "    \n",
    "    def __setitem__(self, n, i):\n",
    "        \"\"\"Sets the interval along the n-th dimension to be i\"\"\"\n",
    "        self.intervals[n] = i\n",
    "\n",
    "    def __eq__(self, other):\n",
    "        if not isinstance(other, Rectangle):\n",
    "            return False\n",
    "        # We rely on interval equality here. \n",
    "        return self.intervals == other.intervals\n",
    "\n",
    "    @property\n",
    "    def ndims(self):\n",
    "        \"\"\"Returns the number of dimensions of the interval.\"\"\"\n",
    "        return len(self.intervals)\n",
    "    \n",
    "    @property\n",
    "    def volume(self):\n",
    "        return np.prod([i.length for i in self.intervals])\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "73c23f0d",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 1489,
     "status": "ok",
     "timestamp": 1613086467402,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 480
    },
    "id": "V85KFSJnEHON",
    "notebookgrader": {
     "id": "674c57f51ab81066f4c7d77e9c107c2a65aafe48",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    },
    "outputId": "e4b7a059-41ab-4a23-ba78-0f392c0320a9"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Rectangle IPJbt0bY: [(3.0, 4.0), (1.0, 4.0)]\n",
       "Rectangle my_rectangle: [(1.0, 2.0), (5.0, 6.0)]\n",
       "Rectangle my_rectangle': [(1.0, 2.0), (5.0, 6.0)]"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(Rectangle(Interval(3., 4.), Interval(1., 4.)))\n",
    "r = Rectangle(Interval(1., 2.), (5., 6.), name=\"my_rectangle\")\n",
    "print(r)\n",
    "print(r.clone())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cdd5a75d",
   "metadata": {
    "id": "jmXd4Ux6BQiS",
    "notebookgrader": {
     "id": "4922460ac7dcca64148a7e13df06eb59e4023a43",
     "readonly": true
    }
   },
   "source": [
    "### Drawing rectangles\n",
    "\n",
    "Before we go much further, it is useful to be able to draw rectangles.  Rectangles can have any number of dimensions, and we will write here code to draw them on 2D, projecting away all other dimensions. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "7f778fce",
   "metadata": {
    "executionInfo": {
     "elapsed": 1488,
     "status": "ok",
     "timestamp": 1613086467403,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 480
    },
    "id": "MXRMyGmKBp-I",
    "notebookgrader": {
     "id": "da79081200665bf9ec85bb0a54f4ec54dca837a8",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.path as mpath\n",
    "import matplotlib.patches as mpatches\n",
    "from matplotlib.collections import PatchCollection\n",
    "matplotlib.rcParams['figure.figsize'] = (6.0, 4.0)\n",
    "    \n",
    "def draw_rectangles(*rectangles, prefix=\"\"):\n",
    "    \"\"\"Here, rectangles is a rectangle iterator; it could be a list, \n",
    "    for instance.\"\"\"\n",
    "    fig, ax = plt.subplots()\n",
    "    patches = []\n",
    "    # We keep track of the limits.\n",
    "    lo_x, hi_x = [], []\n",
    "    lo_y, hi_y = [], []\n",
    "    for r in rectangles:\n",
    "        x0, x1 = r[0].endpoints()\n",
    "        y0, y1 = r[1].endpoints()\n",
    "        lo_x.append(x0)\n",
    "        hi_x.append(x1)\n",
    "        lo_y.append(y0)\n",
    "        hi_y.append(y1)\n",
    "        # Prepares the \"patch\" for the rectangle, see\n",
    "        # https://matplotlib.org/api/_as_gen/matplotlib.patches.Rectangle.html\n",
    "        p = mpatches.Rectangle((x0, y0), x1 - x0, y1 - y0)\n",
    "        y = (y0 + y1) / 2. - 0.0 \n",
    "        x = (x0 + x1) / 2. - 0.0 \n",
    "        plt.text(x, y, prefix + r.name, ha=\"center\", family='sans-serif', size=12)\n",
    "        patches.append(p)\n",
    "    # Draws the patches.\n",
    "    colors = np.linspace(0, 1, len(patches) + 1)\n",
    "    collection = PatchCollection(patches, cmap=plt.cm.hsv, alpha=0.3)\n",
    "    collection.set_array(np.array(colors))\n",
    "    ax.add_collection(collection)\n",
    "    # Computes nice ax limits. Note that I need to take care of the case\n",
    "    # in which the rectangle lists are empty.\n",
    "    lox, hix = (min(lo_x), max(hi_x)) if len(lo_x) > 0 else (0., 1.)\n",
    "    loy, hiy = (min(lo_y), max(hi_y)) if len(lo_y) > 0 else (0., 1.)\n",
    "    sx, sy = hix - lox, hiy - loy\n",
    "    lox -= 0.2 * sx\n",
    "    hix += 0.2 * sx\n",
    "    loy -= 0.2 * sy\n",
    "    hiy += 0.2 * sy\n",
    "    ax.set_xlim(lox, hix)\n",
    "    ax.set_ylim(loy, hiy)\n",
    "    plt.gca().set_aspect('equal', adjustable='box')\n",
    "    plt.grid()\n",
    "    plt.show()\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "a0068d3b",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 269
    },
    "executionInfo": {
     "elapsed": 1661,
     "status": "ok",
     "timestamp": 1613086467599,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 480
    },
    "id": "-doGzrTlGMo6",
    "notebookgrader": {
     "id": "c6a9464c393a18388298ca6fee9a1c45e70db0c4",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    },
    "outputId": "ab367c4e-45a4-498c-d0e5-a62a987f25ed"
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r1 = Rectangle((3., 5.), (1., 4.), name=\"A\")\n",
    "r2 = Rectangle((1., 4.), (2., 6.), name=\"B\")\n",
    "r3 = Rectangle((2., 3.5), (1.5, 5.), name=\"C\")\n",
    "draw_rectangles(r1, r2, r3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8838f603",
   "metadata": {
    "id": "E2PSivr6IvVf",
    "notebookgrader": {
     "id": "75bb18db395b3d1cb18c85f16b7851c3781e1609",
     "readonly": true
    }
   },
   "source": [
    "### Rectangle Operations"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef2c9ecd",
   "metadata": {
    "id": "aLjT5SnaJBES",
    "notebookgrader": {
     "id": "33e4eff0f1847b37dc5ea129097ed193cce6088e",
     "readonly": true
    }
   },
   "source": [
    "There are three main operations on rectangles: intersection, union, and difference. \n",
    "Among them, only intersection is guaranteed to return another rectangle.  In general, the union of two rectangles is ... two rectangles, and the difference between two rectangles is ... a whole lot of rectangles, as we will see.\n",
    "\n",
    "We let you implement rectangle intersection.  Of course, the intersection is defined only if the rectangles have the same number of dimensions.  The intersection is computed by taking the intersection of the intervals of the two rectangles for corresponding dimensions.  If one of the intervals is empty, you should return None.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "10fb8bf4",
   "metadata": {
    "executionInfo": {
     "elapsed": 300,
     "status": "ok",
     "timestamp": 1729041972692,
     "user": {
      "displayName": "Azarias Ashenafi",
      "userId": "07661282689053385655"
     },
     "user_tz": 420
    },
    "id": "P_jTBs-gJowG",
    "notebookgrader": {
     "id": "602094082a4da27ed58b46e062ed9338b69fafa6",
     "is_solution": true,
     "is_tests": false,
     "readonly": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# @ title Rectangle intersection\n",
    "\n",
    "def rectangle_and(self, other):\n",
    "    if self.ndims != other.ndims:\n",
    "        raise TypeError(\"The rectangles have different dimensions: {} and {}\".format(\n",
    "            self.ndims, other.ndims\n",
    "        ))\n",
    "    ### YOUR SOLUTION HERE\n",
    "    x1 = max(self[0][0], other[0][0])\n",
    "    x2 = min(self[0][1], other[0][1])\n",
    "\n",
    "    y1 = max(self[1][0], other[1][0])\n",
    "    y2 = min(self[1][1], other[1][1])\n",
    "\n",
    "    if x1 >= x2:\n",
    "        return None\n",
    "    if y1 >= y2:\n",
    "        return None\n",
    "\n",
    "    return Rectangle((x1, x2), (y1, y2))\n",
    "\n",
    "\n",
    "\n",
    "Rectangle.__and__ = rectangle_and"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "c193ea2b",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 513
    },
    "executionInfo": {
     "elapsed": 2351,
     "status": "ok",
     "timestamp": 1613086468310,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 480
    },
    "id": "v3JKgPIZKWX5",
    "notebookgrader": {
     "id": "265f6a851e7e7db4c38aff640beed1a98bb0b020",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    },
    "outputId": "92543216-fd41-4344-b80a-2515383a944f"
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r1 = Rectangle((2, 3), (0, 4))\n",
    "r2 = Rectangle((0, 4), (1, 3))\n",
    "draw_rectangles(r1, r2)\n",
    "draw_rectangles(r1 & r2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "ae3a926e",
   "metadata": {
    "executionInfo": {
     "elapsed": 2349,
     "status": "ok",
     "timestamp": 1613086468310,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 480
    },
    "id": "2_BMdmckYAjE",
    "notebookgrader": {
     "id": "1a197878c8162e48b35165092fe9c1de33df16cd",
     "is_solution": false,
     "is_tests": true,
     "points_earned": 10,
     "readonly": true,
     "test_points": 10
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<b>Tests passed, you earned 10/10 points</b>"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Tests 10 points. \n",
    "\n",
    "r1 = Rectangle((12, 13), (0, 4))\n",
    "r2 = Rectangle((0, 4), (1, 3))\n",
    "\n",
    "assert r1 & r2 is None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "d088f94a",
   "metadata": {
    "executionInfo": {
     "elapsed": 593,
     "status": "ok",
     "timestamp": 1729042035035,
     "user": {
      "displayName": "Azarias Ashenafi",
      "userId": "07661282689053385655"
     },
     "user_tz": 420
    },
    "id": "IHlONNPNiZiM",
    "notebookgrader": {
     "id": "ec230a8abec913f13557945ceae80f49a39263d6",
     "is_solution": true,
     "is_tests": false,
     "readonly": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#@title Membership of a point in a rectangle.\n",
    "\n",
    "def rectangle_contains(self, p):\n",
    "    # The point is a tuple with one element per dimension of the rectangle.\n",
    "    assert len(p) == self.ndims\n",
    "    ### YOUR SOLUTION HERE\n",
    "    xPlane = self.intervals[0]\n",
    "    yPlane = self.intervals[1]\n",
    "    if (xPlane[0] <= p[0] <= xPlane[1]) and (yPlane[0] <= p[1] <= yPlane[1]):\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "\n",
    "Rectangle.__contains__ = rectangle_contains"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "aeb5fe32",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 2327,
     "status": "ok",
     "timestamp": 1613086468311,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 480
    },
    "id": "zLk8jc8KkDgh",
    "notebookgrader": {
     "id": "9c1dd6e2543f05e0b613d0f504e69958a13da435",
     "is_solution": false,
     "is_tests": true,
     "points_earned": 10,
     "readonly": true,
     "test_points": 10
    },
    "outputId": "3e5e3e3f-f0e5-4dd7-89ca-7d95a2b7127c"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<b>Tests passed, you earned 10/10 points</b>"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Tests 10 points. \n",
    "\n",
    "assert (2, 3) in Rectangle((0, 4), (1, 5))\n",
    "assert (2, 3) not in Rectangle((0, 4), (4, 5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ab8677d",
   "metadata": {
    "id": "GUkxv4uyL0Mv",
    "notebookgrader": {
     "id": "0fc70369449f5dc84abdc0677459f1fb946b2a73",
     "readonly": true
    }
   },
   "source": [
    "**Exercise:** Write a method `__eq__` such that `r1 == r2` is `True` iff the two rectangles are identical, and a method `__le__` such that `r1 <= r2` returns `True` iff `r1` is a subset of `r2`. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60d71ac3",
   "metadata": {
    "id": "_AxANvv7LGJo",
    "notebookgrader": {
     "id": "77c618cf00ba0659f2efd4ebb010b85f4e2706df",
     "readonly": true
    }
   },
   "source": [
    "### Rectangle Difference"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21ea3140",
   "metadata": {
    "id": "ULdpO3qZLI-m",
    "notebookgrader": {
     "id": "1ca9174a5a38bb9c5ba191bc491988dcb39dc526",
     "readonly": true
    }
   },
   "source": [
    "There are two ways of defining rectangle difference: \n",
    "\n",
    "* _Largest-cover difference_, which returns the difference represented by rectangles that are as large as possible, and therefore may be overlapping. \n",
    "* _Disjoint difference_, which returns rectangles that are disjoint. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b591d85",
   "metadata": {
    "id": "FKoGrS6DX3BP",
    "notebookgrader": {
     "id": "ac9a9a01e5a69b3e6ec68bf40f1e89fb2dc8c17f",
     "readonly": true
    }
   },
   "source": [
    "### Largest-Cover Difference\n",
    "\n",
    "Given two rectangles $R = (I_1, I_2, \\ldots, I_n)$ and $T = (J_1, J_2, \\ldots, J_n)$, their difference $R-T$ is the region $\\alpha =\\tilde{R} \\setminus \\tilde{T}$. We make the following observation: for a point to be in $R$ and not in $T$, all it takes is that in *one* of the dimensions $k$, it is in $I_k$, but not in $J_k$. \n",
    "\n",
    "Based on this idea, we construct a representation of $\\tilde{R} \\setminus \\tilde{T}$ as follows.  We initialize the list of result rectangles to be empty.  Then, we iterate over all dimensions $k = 1, 2, \\ldots, n$, and for each dimension $k$, we construct rectangles with intervals $I_1, \\ldots, I_{k-1}, I_k - J_k, I_{k+1}, \\ldots, I_n$, where $I_k - J_k$ represents interval difference.  There can be 0, 1, or 2 intervals in $I_k - J_k$, and correspondingly, $I_1, \\ldots, I_{k-1}, I_k - J_k, I_{k+1}, \\ldots, I_n$ will consist of 0, 1, or 2 rectangles; we add all such rectangles to the result list.  Let's translate this idea into code."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "6fa7c80c",
   "metadata": {
    "id": "qinxJvpLdUnw",
    "notebookgrader": {
     "id": "f59b9f69654bbe385219e8fde45bd9632caf2adc",
     "is_solution": true,
     "is_tests": false,
     "readonly": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#@title Implementation of largest-cover difference\n",
    "\n",
    "def rectangle_difference(r, t):\n",
    "    \"\"\"Computes the rectangle difference r - t, and outputs the result\n",
    "    as a list of rectangles.\"\"\"\n",
    "    assert len(r) == len(t), \"Rectangles have different dimensions\"\n",
    "    ### YOUR SOLUTION HERE\n",
    "       # answer = []\n",
    "    # for i in range(len(r)):\n",
    "    #     answer.append(r[i] - t[i])\n",
    "    # return answer\n",
    "    pass\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a7b5895",
   "metadata": {
    "id": "sYNYlXiCPuii",
    "notebookgrader": {
     "id": "035d9a4e6c7f71ac28bddb7d9646f361d2eb5100",
     "readonly": true
    }
   },
   "source": [
    "In the above code, we notice how it paid off to encapsulate intervals in their own abstraction.  Now that we need to reason about rectangles, we do not need to get bogged down into complicated considerations of how to perform difference; the comparisons between endpoints are all done in the context of intervals, where it is easier to reason about them.  It is often the case that problems become easy, once you think at them in the appropriate context.  It is much easier to develop the code for the difference of intervals, as we have done, and then move on to difference of rectangles, rather than trying to write code for rectangle difference directly.  The result is also far more elegant."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "37ac0fba",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 513
    },
    "executionInfo": {
     "elapsed": 2924,
     "status": "ok",
     "timestamp": 1613086468951,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 480
    },
    "id": "QRX6VJNwv1HX",
    "notebookgrader": {
     "id": "3d33061f2580a71e680cba7f3b4175a2ac144938",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    },
    "outputId": "0f96dd60-e5a2-44e1-de78-876a9c023581"
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Traceback (most recent call last):\n",
       "  File \"<string>\", line 5, in <module>\n",
       "TypeError: draw_rectangles() argument after * must be an iterable, not NoneType\n"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let us test visually what happens.\n",
    "r = Rectangle((0., 4.), (0., 4.), name=\"R\")\n",
    "t = Rectangle((2., 6.), (2., 6.), name=\"T\")\n",
    "d = rectangle_difference(r, t)\n",
    "draw_rectangles(r, t)\n",
    "draw_rectangles(*d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "0305910b",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 513
    },
    "executionInfo": {
     "elapsed": 3645,
     "status": "ok",
     "timestamp": 1613086469692,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 480
    },
    "id": "PJyCh48Dv-GV",
    "notebookgrader": {
     "id": "b128b67e729557b61a6a5c06d867e23e5d92942f",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    },
    "outputId": "f5adce59-22ad-437a-ed63-24c955cc47d2"
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Traceback (most recent call last):\n",
       "  File \"<string>\", line 5, in <module>\n",
       "TypeError: draw_rectangles() argument after * must be an iterable, not NoneType\n"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Whooho!!  Let's try with another example. Now T is inside R. \n",
    "r = Rectangle((0., 4.), (0., 4.), name=\"R\")\n",
    "t = Rectangle((1.5, 3.5), (1., 3.), name=\"T\")\n",
    "d = rectangle_difference(r, t)\n",
    "draw_rectangles(r, t)\n",
    "draw_rectangles(*d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "bce27cb7",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 517
    },
    "executionInfo": {
     "elapsed": 3627,
     "status": "ok",
     "timestamp": 1613086469694,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 480
    },
    "id": "82Mz3JWexTLW",
    "notebookgrader": {
     "id": "3270ae381e867fa0921085be28d59302dc2cd465",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    },
    "outputId": "50a9de51-8c0c-42ac-e649-4f05d6150e05"
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Traceback (most recent call last):\n",
       "  File \"<string>\", line 5, in <module>\n",
       "TypeError: draw_rectangles() argument after * must be an iterable, not NoneType\n"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# It seems to work. And what happens if nothing is left?  \n",
    "r = Rectangle((0., 4.), (0., 4.), name=\"R\")\n",
    "t = Rectangle((0., 5.), (0., 7.), name=\"T\")\n",
    "d = rectangle_difference(r, t)\n",
    "draw_rectangles(r, t)\n",
    "draw_rectangles(*d)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d0f7e51",
   "metadata": {
    "id": "iKRQUggHbFwh",
    "notebookgrader": {
     "id": "8e0b97eb0e57e9982a37a2f61cde589719c7f60c",
     "readonly": true
    }
   },
   "source": [
    "#### Disjoint difference\n",
    "\n",
    "We can also define a version of rectangle difference which returns a set of _disjoint_ rectangles.  The idea is this.  Let the two rectangles be $R = (I_1, \\ldots, I_n)$ and $S = (J_1, \\ldots, J_n)$, where $I_1, \\ldots, I_n$ and $J_1, \\ldots, J_n$ are the intervals forming the two rectangles $R$ and $S$. \n",
    "\n",
    "To compute the difference $R \\setminus S$ as a list of disjoint rectangles, we reason by induction (thus writing a recursive solution). Consider the coordinate $k = 1$. \n",
    "\n",
    "Let $I_1 - J_1 = A$, so that $A$ is a list consisting of 0, 1, or 2 intervals.  Clearly, for any interval $L \\in A$, we have that $(L, I_2, \\ldots, I_n)$ is part of the result. \n",
    "\n",
    "As for the remaining part of the result, let $I_1 \\cap J_1 = H$.\n",
    "$H$ can be empty, or consist of one interval.  \n",
    "The rest of the result is given by\n",
    "\n",
    "$$\n",
    "(H, I_2, \\ldots, I_n) \\setminus (J_1, J_2, \\ldots, J_n) \n",
    "=\n",
    "H \\times [(I_2, \\ldots, I_n) \\setminus (J_2, \\ldots, J_n)] \\; . \n",
    "$$\n",
    "\n",
    "It is easier thus to define a generator, which yields all the rectangles in the difference. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "93432e08",
   "metadata": {
    "id": "TsjS5Xu3nVIz",
    "notebookgrader": {
     "id": "39e08ae38a877283836d15d7e4f697d0c2985987",
     "is_solution": true,
     "is_tests": false,
     "readonly": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#@title Computation of disjoint difference\n",
    "\n",
    "def disjoint_minus(r, s):\n",
    "    \"\"\"R and S are equal-length lists of intervals, representing\n",
    "    two rectangles R and S.  The function returns, or better, yields,\n",
    "    all the rectangles in the disjoint difference of R and S.\"\"\"\n",
    "    ### YOUR SOLUTION HERE\n",
    "    pass\n",
    "\n",
    "def disjoint_difference(self, other):\n",
    "    return [Rectangle(*intervals) for intervals in disjoint_minus(self.intervals, other.intervals)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "c3ba3d95",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 550
    },
    "executionInfo": {
     "elapsed": 4076,
     "status": "ok",
     "timestamp": 1613086470167,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 480
    },
    "id": "whw3qQwDqssU",
    "notebookgrader": {
     "id": "ad9241ee2e639f08540334e44aef23251c8dcab7",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    },
    "outputId": "11e4ed08-79b8-429f-ee24-d22609f1584a"
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Traceback (most recent call last):\n",
       "  File \"<string>\", line 8, in disjoint_difference\n",
       "TypeError: 'NoneType' object is not iterable\n"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r = Rectangle((0., 4.), (0., 4.), name=\"R\")\n",
    "t = Rectangle((1.5, 3.5), (1., 3.), name=\"S\")\n",
    "d = disjoint_difference(r, t)\n",
    "print(d)\n",
    "draw_rectangles(r, t)\n",
    "draw_rectangles(*d)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "304cc0fe",
   "metadata": {
    "id": "pHL9SV8dy0Vs",
    "notebookgrader": {
     "id": "d343f348dd423347e7db9d8a5e808ec6fb79a210",
     "readonly": true
    }
   },
   "source": [
    "## Regions\n",
    "\n",
    "The problem with rectangles is that they are not closed under union: the union of two rectangles is not necessarily a rectangle.  \n",
    "\n",
    "We want a representation for objects in space that is closed under union, intersection, and difference. \n",
    "To this end, we introduce _regions_, which are unions of rectangles. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "0e79ae87",
   "metadata": {
    "executionInfo": {
     "elapsed": 4074,
     "status": "ok",
     "timestamp": 1613086470167,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 480
    },
    "id": "YbeFW6SSySBR",
    "notebookgrader": {
     "id": "6a88f3c8345cfd20b6596099aed14d70ebe1f12c",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "class Region(object):\n",
    "\n",
    "    def __init__(self, *rectangles, name=None):\n",
    "        \"\"\"A region is initialized via a set of rectangles.\"\"\"\n",
    "        assert len(rectangles) > 0, \"A region requires at least one rectangle.\"\n",
    "        self.ndims = rectangles[0].ndims\n",
    "        for r in rectangles[1:]:\n",
    "            assert r.ndims == self.ndims, \"The rectangles do not all have the same dimensions!\"\n",
    "        self.rectangles = list(rectangles)\n",
    "        if name is None:\n",
    "            self.name = ''.join(\n",
    "                random.choices(string.ascii_letters + string.digits, k=8))\n",
    "        else:\n",
    "            self.name = name\n",
    "            \n",
    "    def draw(self):\n",
    "        draw_rectangles(*self.rectangles, prefix=self.name + \":\")\n",
    "\n",
    "    def __or__(self, other):\n",
    "        \"\"\"Union of regions.\"\"\"\n",
    "        return Region(*(self.rectangles + other.rectangles), name=self.name + \"_union_\" + other.name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "36aef19b",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 269
    },
    "executionInfo": {
     "elapsed": 4343,
     "status": "ok",
     "timestamp": 1613086470457,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 480
    },
    "id": "qrnkne3imfkX",
    "notebookgrader": {
     "id": "c3238df3a2955b198de7cdfd586efcc1d1368231",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    },
    "outputId": "c66a6062-d9b7-4f34-d5cf-32d9dd8819fa"
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let us try. \n",
    "r = Rectangle((0., 4.), (0., 4.), name=\"R\")\n",
    "t = Rectangle((1.5, 3.5), (1., 5.), name=\"T\")\n",
    "\n",
    "reg1 = Region(r, name=\"Reg1\")\n",
    "reg2 = Region(t, name=\"Reg2\")\n",
    "\n",
    "(reg1 | reg2).draw()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d3363b5",
   "metadata": {
    "id": "Bhpg-310ZXJX",
    "notebookgrader": {
     "id": "5f8800ec91e78b7fd201eea51cca02d098cbe238",
     "readonly": true
    }
   },
   "source": [
    "## Exercises"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e2dc0d91",
   "metadata": {
    "id": "8dvLaa6umfkd",
    "notebookgrader": {
     "id": "d2ba08c778ca504287d74d9bcf9292fe27ef6598",
     "readonly": true
    }
   },
   "source": [
    "**Exercise**: Write a method `__and__` that computes the region representing the intersection of two regions. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f20ca0e3",
   "metadata": {
    "id": "ili0oD9w6ZDZ",
    "notebookgrader": {
     "id": "6564aebed84d11891ab2c85441898b29f0765930",
     "readonly": true
    }
   },
   "source": [
    "**Exercise:** Write a method `__contains__`, which checks whether a n-dimensional point belongs to the region.  Remember, a point belongs to the region if it belongs to one of the rectangles in the region. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "610a1aa2",
   "metadata": {
    "executionInfo": {
     "elapsed": 257,
     "status": "ok",
     "timestamp": 1729042111339,
     "user": {
      "displayName": "Azarias Ashenafi",
      "userId": "07661282689053385655"
     },
     "user_tz": 420
    },
    "id": "N4C31Hl2iU0S",
    "notebookgrader": {
     "id": "5194a69242faa3f8b2501d6633ee2c76f4a8f683",
     "is_solution": true,
     "is_tests": false,
     "readonly": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#@title Membership of a point in a region\n",
    "\n",
    "def region_contains(self, p):\n",
    "    ### YOUR SOLUTION HERE\n",
    "    for a in self.rectangles:\n",
    "        if p in a:\n",
    "            return True\n",
    "    return False\n",
    "\n",
    "Region.__contains__ = region_contains"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "42a60a56",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 4324,
     "status": "ok",
     "timestamp": 1613086470458,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 480
    },
    "id": "E5G-6zZWlQy2",
    "notebookgrader": {
     "id": "846fff1af0ec303aae378f2090eaab7ff19d0ea6",
     "is_solution": false,
     "is_tests": true,
     "points_earned": 10,
     "readonly": true,
     "test_points": 10
    },
    "outputId": "425d509b-5172-43db-ad99-8357c52dd2a5"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<b>Tests passed, you earned 10/10 points</b>"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Tests 10 points. \n",
    "\n",
    "assert (2, 1) in Region(Rectangle((0, 2), (0, 3)), Rectangle((4, 6), (5, 8)))\n",
    "assert (2, 1) not in Region(Rectangle((0, 1), (0, 3)), Rectangle((4, 6), (5, 8)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "962b0e0c",
   "metadata": {
    "id": "LeChjhzBcVOf",
    "notebookgrader": {
     "id": "b876e5380a5410a9543a0bb6b13b223d4bbfff38",
     "readonly": true
    }
   },
   "source": [
    "**Exercise:** Write a method `__le__` for regions such that `R <= S` if the region `R` is contained in the region `S`.  You can test this by checking that the difference between R and S is empty. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d060abce",
   "metadata": {
    "id": "OGdFDlEW-XlT",
    "notebookgrader": {
     "id": "ba618eb69018e0561765af94007d12887dcf6754",
     "readonly": true
    }
   },
   "source": [
    "**Excercise:** Write a subclass `NonoverlappingRegion` of `Region`, such that rectangles in `NonoverlappingRegion` are non-overlapping.  One should be able to create an object of class `NonoverlappingRegion` from any list of rectangles, and the initializer should use the method `disjoint_minus` to generate a list of non-overlapping rectangles defining the same region of space.  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ffc1e0e",
   "metadata": {
    "id": "5zFOK6nAyfu8",
    "notebookgrader": {
     "id": "4d1e2984dedac806db2848925cae356b13f758df",
     "readonly": true
    }
   },
   "source": [
    "## Monte-Carlo Methods\n",
    "\n",
    "There are some obvious things we might want to do with a region, namely, compute its volume, compute whether two regions are equal, and compute the center of mass of a region. \n",
    "\n",
    "There are two approaches to this.\n",
    "\n",
    "One is to develop a precise approach.  The problem in computing the volume of a region is that the rectangles in it might overlap.  To solve this, one can use our method for computing disjoing differences to put regions in _normal form_, consisting of non-overlapping rectangles. \n",
    "The idea is to keep a region as a list of non-overlapping rectangles.  When we add a rectangle $S$ from a region consisting of non-overlapping rectangles $R_1, \\ldots, R_n$, we first subtract from $S$ each of $R_1, \\ldots, R_n$ in turn, getting as result a bunch of subrectangles of $S$; we can then add these subrectangles to the region. \n",
    "\n",
    "But this sounds like work! \n",
    "\n",
    "An alternative is to develop a _randomized_ approach."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e630e654",
   "metadata": {
    "id": "zDWkI9M7zpnu",
    "notebookgrader": {
     "id": "5f07d0297f15a350ccf1ef3a9ed540e444442ede",
     "readonly": true
    }
   },
   "source": [
    "### A Monte-Carlo algorithm for region area\n",
    "\n",
    "We can develop a randomized approach to measuring the area of a region as follows.  First, we compute a _bounding box_ around it, which is simply the smallest rectangle guaranteed to contain the region.  We simply take, for each coordinate, the min and max values of that coordinate of any rectangle in the region. \n",
    "\n",
    "Once we have a bounding box $B$ for a region $\\cal R$, we simply pick at random a lot of points $x \\in B$, using our Python `random` function.   We can use our test $x \\in \\cal R$, written in code as `x in my_region`, to check whether a point $x$ belongs to region $\\cal R$.  Let $N$ be the number of points we generate, and $M$ be the number of points that end up in $\\cal R$.  The volume $V_{\\cal R}$ of the region $\\cal R$ can be simply written as: \n",
    "\n",
    "$$\n",
    "V_{\\cal R} = \\frac{M}{N} \\cdot V_B \\; ,\n",
    "$$\n",
    "\n",
    "where $V_B$ is the volume of the bounding box.  We will lead you to implement this code in steps. \n",
    "\n",
    "This method is an example of a [Monte Carlo method](https://en.wikipedia.org/wiki/Monte_Carlo_method), a method which gives an answer to a question via repeated randomized experiments, rather than via mathematical computation, which may be complex or unfeasible. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2c98324",
   "metadata": {
    "id": "6t2TLzjF1V4z",
    "notebookgrader": {
     "id": "1ff91bc552ca5d5285aada869cb5852a873f24b6",
     "readonly": true
    }
   },
   "source": [
    "### Bounding boxes\n",
    "\n",
    "First, write a method `bounding_box` of a region, which returns the bounding box as a rectangle. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "4065a767",
   "metadata": {
    "cellView": "form",
    "id": "lH6I8i-4yd2g",
    "notebookgrader": {
     "id": "2992d046565e13436710ba04d99fb0b988364c37",
     "is_solution": true,
     "is_tests": false,
     "readonly": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#@title Compute the bounding box of a region\n",
    "\n",
    "def region_bounding_box(self):\n",
    "    \"\"\"Returns the bounding box of the region, as a rectangle.\n",
    "    This returns None if the region does not contain any rectangle.\"\"\"\n",
    "    if len(self.rectangles) == 0:\n",
    "        return None\n",
    "    ### YOUR SOLUTION HERE\n",
    "\n",
    "Region.bounding_box = property(region_bounding_box)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "676fb1c7",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 4287,
     "status": "ok",
     "timestamp": 1613086470460,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 480
    },
    "id": "9DQ-NuAC20zw",
    "notebookgrader": {
     "id": "20bb1a375d74daff386650d50f56e042d029f096",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    },
    "outputId": "4eedb67e-f2e2-4009-a5c3-ebb30af055e3"
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg = Region(Rectangle((0, 2), (1, 3)), Rectangle((4, 6), (5, 8)))\n",
    "reg.bounding_box"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc733440",
   "metadata": {
    "id": "aCNRJKzm3yHi",
    "notebookgrader": {
     "id": "d5883963b52aa91247d0cc734c00684bae3f5719",
     "readonly": true
    }
   },
   "source": [
    "### Select random points from a rectangle\n",
    "\n",
    "Next, we write a Rectangle method `random_point`, which returns a point of a rectangle chosen uniformly at random each time it is called.  To this end, it is easier first to write the corresponding method for an interval.  [In Python](https://docs.python.org/3/library/random.html#real-valued-distributions), \n",
    "\n",
    "    random.random()\n",
    "\n",
    "returns a random value uniformly distributed between 0 and 1, and \n",
    "\n",
    "    random.uniform(a, b)\n",
    "\n",
    "returns a random value uniformly distributed between a and b.  We can use this to define the interval method: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "5487fcc9",
   "metadata": {
    "executionInfo": {
     "elapsed": 4285,
     "status": "ok",
     "timestamp": 1613086470460,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 480
    },
    "id": "GiqxFV1u2_KH",
    "notebookgrader": {
     "id": "e62b7c6169d2821b110323d5f0dcd508729f5e1c",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import random\n",
    "\n",
    "def interval_random_point(self):\n",
    "    return random.uniform(self.x0, self.x1)\n",
    "\n",
    "Interval.random_point = interval_random_point\n",
    "\n",
    "# Or if we wanted to be concise, we could just have written: \n",
    "\n",
    "Interval.random_point = lambda self : random.uniform(self.x0, self.x1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0882741",
   "metadata": {
    "id": "jx7n4dSt5omx",
    "notebookgrader": {
     "id": "24da403fca728000f5c9e163932efcd7e7d1e58d",
     "readonly": true
    }
   },
   "source": [
    "To select a random point from a rectangle, we just need to return a tuple formed by choosing a random point from each of the rectangle's intervals.  We leave this to you.  Remember that the intervals of a rectangle `self` are in `self.intervals`. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "20284f80",
   "metadata": {
    "id": "yV1NFqEh5kHr",
    "notebookgrader": {
     "id": "bb40c59359227ce7f11022d1dd21d148925500cf",
     "is_solution": true,
     "is_tests": false,
     "readonly": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#@title Random point of a rectangle\n",
    "\n",
    "def rectangle_random_point(self):\n",
    "    ### YOUR SOLUTION HERE\n",
    "    pass\n",
    "\n",
    "Rectangle.random_point = rectangle_random_point"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "5800c4c7",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 4264,
     "status": "ok",
     "timestamp": 1613086470461,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 480
    },
    "id": "1rE6bl5z6NOL",
    "notebookgrader": {
     "id": "4a36fd11e6d30076a43d786724cf51e6541d1187",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    },
    "outputId": "7e78ab20-5a56-41c5-dca4-54c006e2d613"
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Traceback (most recent call last):\n",
       "  File \"<string>\", line 4, in <module>\n",
       "AssertionError\n"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r = Rectangle((0, 2), (1, 3))\n",
    "\n",
    "for i in range(5):\n",
    "    p = r.random_point()\n",
    "    assert isinstance(p, tuple)\n",
    "    assert len(p) == 2\n",
    "    assert p in r\n",
    "    print(p)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c7c4e1d",
   "metadata": {
    "id": "NoD-oQaU6q6B",
    "notebookgrader": {
     "id": "ee97393ba5ab1d19183fe25b9b63e044d63c9e35",
     "readonly": true
    }
   },
   "source": [
    "We are now ready to compute the volume of a region $\\cal R$ using Monte Carlo methods.  The form of your code is: \n",
    "\n",
    "* Compute the bounding box $B$\n",
    "* Pick $N$ points at random from $B$, and count the number $M$ of them that fall in $\\cal R$. \n",
    "* Return $B.volume \\cdot (M/N)$. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "7e2409bf",
   "metadata": {
    "cellView": "form",
    "id": "1Bh7kXJ66fWr",
    "notebookgrader": {
     "id": "2d7f38d250a7382adb547f72966f4eee1a51616f",
     "is_solution": true,
     "is_tests": false,
     "readonly": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#@title Monte carlo Volume\n",
    "\n",
    "def region_montecarlo_volume(self, n=1000):\n",
    "    \"\"\"Computes the volume of a region, using Monte Carlo approximation\n",
    "    with n samples.\"\"\"\n",
    "    # The solution, written without any particular trick, takes 7 lines.\n",
    "    # If you write a much longer solution, you are on the wrong track.\n",
    "    ### YOUR SOLUTION HERE\n",
    "    pass\n",
    "\n",
    "Region.montecarlo_volume = region_montecarlo_volume"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43b5ffa6",
   "metadata": {
    "id": "-nf3MUCo81gL",
    "notebookgrader": {
     "id": "847acb2bb1631e38814a8922590b155a18319a1b",
     "readonly": true
    }
   },
   "source": [
    "The approximation becomes the more precise, the more samples we have. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "fb33b050",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 333
    },
    "executionInfo": {
     "elapsed": 4486,
     "status": "ok",
     "timestamp": 1613086470705,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 480
    },
    "id": "8C0HETqE8eap",
    "notebookgrader": {
     "id": "02b5b637e96448a1aae7c2ca9f8f42114dcec988",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    },
    "outputId": "e1f176e1-b5c2-48ad-f901-2be5dbc54055"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "   10 samples: None\n",
       "  100 samples: None\n",
       " 1000 samples: None\n",
       "10000 samples: None"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg = Region(Rectangle((0, 4), (0, 2)), Rectangle((1, 2), (0, 4)))\n",
    "reg.draw()\n",
    "print(\"   10 samples:\", reg.montecarlo_volume(n=10))\n",
    "print(\"  100 samples:\", reg.montecarlo_volume(n=100))\n",
    "print(\" 1000 samples:\", reg.montecarlo_volume(n=1000))\n",
    "print(\"10000 samples:\", reg.montecarlo_volume(n=10000))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "01b5d16d",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 333
    },
    "executionInfo": {
     "elapsed": 4730,
     "status": "ok",
     "timestamp": 1613086470968,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 480
    },
    "id": "dQ9H_TDVEHKX",
    "notebookgrader": {
     "id": "16374d19c15d44ddf20bce11527e826564ce9c81",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    },
    "outputId": "0d5b2f22-e893-45f7-cab5-f4b14cac627e"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "   10 samples: None\n",
       "  100 samples: None\n",
       " 1000 samples: None\n",
       "10000 samples: None"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg = Region(Rectangle((0, 1), (0, 4)), Rectangle((0, 4), (0, 1)))\n",
    "reg.draw()\n",
    "print(\"   10 samples:\", reg.montecarlo_volume(n=10))\n",
    "print(\"  100 samples:\", reg.montecarlo_volume(n=100))\n",
    "print(\" 1000 samples:\", reg.montecarlo_volume(n=1000))\n",
    "print(\"10000 samples:\", reg.montecarlo_volume(n=10000))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b384502",
   "metadata": {
    "id": "tjDEiFTA-ZbD",
    "notebookgrader": {
     "id": "21370399e292d1f196f3254db34c6b99f58a2ee2",
     "readonly": true
    }
   },
   "source": [
    "We could quantify the standard deviation of the result, but it is beyond the scope of this class. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "54cda76e",
   "metadata": {
    "id": "o6_5QDOk-rTU",
    "notebookgrader": {
     "id": "4f8499c652572dd8a6ff7703ede24e52d4654bfd",
     "readonly": true
    }
   },
   "source": [
    "**Exercise:** Develop a Monte-Carlo method for computing the center of mass of a region.  The idea consists in sampling uniformly at random from the bounding box, retaining only the points that are in the region.  The center of mass of the sampled points in the region provides an approximation for the center of mass of the region. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e94494f",
   "metadata": {
    "id": "UZ5_0vPD_GYr",
    "notebookgrader": {
     "id": "65d4eafdb6c0bc2ed7726f4bc6122ce6d46faab8",
     "readonly": true
    }
   },
   "source": [
    "## A Monte-Carlo method for region equality\n",
    "\n",
    "We can apply Monte Carlo methods also to the question of deciding region equality. \n",
    "\n",
    "One way to decide whether two regions $\\cal R_1$ and $\\cal R_2$ are equal consists in subtracting $\\cal R_2$ from $\\cal R_1$ and checking that the result is empty, and then subtracting $\\cal R_1$ from $\\cal R_2$, and checking that it is also empty. \n",
    "\n",
    "But again, this sounds like work, and why work if we can just guess? \n",
    "\n",
    "The idea is to compute the bounding box $B$ of $\\cal R_1 \\cup \\cal R_2$, and to sample points from $B$.  If we find a point $p$ that belongs to one region but not the other, we declare the regions distinct.  If we do not find such \"distinguishing\" point after $N$ trials, we declare the regions identical, and the point serves as a witness to their difference. \n",
    "\n",
    "We leave the implementation to you. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "4fa243a0",
   "metadata": {
    "cellView": "form",
    "id": "B2KElWYZ9D_R",
    "notebookgrader": {
     "id": "d203039eca9ced07a9cd52097fb0582187b82575",
     "is_solution": true,
     "is_tests": false,
     "readonly": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#@title Monte Carlo difference and equality between regions\n",
    "\n",
    "def region_montecarlo_difference(self, other, n=1000):\n",
    "    \"\"\"Checks whether a region self is different from a region other, using\n",
    "    a Monte Carlo method with n samples.  It returns either a point p that\n",
    "    witnesses the difference of the regions, or None, if no such point is found.\"\"\"\n",
    "    # This can be done without hurry in 6 lines of code.\n",
    "    ### YOUR SOLUTION HERE\n",
    "    pass\n",
    "\n",
    "Region.montecarlo_difference = region_montecarlo_difference\n",
    "\n",
    "def region_montecarlo_equality(self, other, n=1000):\n",
    "    return self.montecarlo_difference(other, n=n) is None\n",
    "\n",
    "Region.montecarlo_equality = region_montecarlo_equality"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "f00bc7bb",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 812
    },
    "executionInfo": {
     "elapsed": 5457,
     "status": "ok",
     "timestamp": 1613086471717,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 480
    },
    "id": "cwGDwPWoCB2D",
    "notebookgrader": {
     "id": "8346b586a2951ad3f4262c87db7032fe7f3a4425",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    },
    "outputId": "129d68e9-b801-4619-9f90-f7f8846eb472"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "reg1 vs reg2 True\n",
       "reg1 vs reg2 True\n",
       "reg1 vs reg3 None"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg1 = Region(Rectangle((0, 4), (0, 2)), Rectangle((1, 2), (0, 4)), name=\"reg1\")\n",
    "reg2 = Region(Rectangle((0, 4), (0, 2)), Rectangle((1, 2), (1, 4)), name=\"reg2\")\n",
    "reg3 = Region(Rectangle((0, 4), (0, 2)), Rectangle((1, 2), (0, 3)), name=\"reg3\")\n",
    "reg1.draw()\n",
    "reg2.draw()\n",
    "reg3.draw()\n",
    "print(\"reg1 vs reg2\", reg1.montecarlo_equality(reg2))\n",
    "print(\"reg1 vs reg2\", reg1.montecarlo_equality(reg3))\n",
    "print(\"reg1 vs reg3\", reg1.montecarlo_difference(reg3))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "ab18f8fb",
   "metadata": {
    "executionInfo": {
     "elapsed": 5456,
     "status": "ok",
     "timestamp": 1613086471718,
     "user": {
      "displayName": "Luca de Alfaro",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GglDMDg36EHotpxQkigzB_qfRxBUgtQd34DimEqQw=s64",
      "userId": "08154392717664554862"
     },
     "user_tz": 480
    },
    "id": "XuTgOgt9CZ5w",
    "notebookgrader": {
     "id": "13237bc52d5ae54f738eba40328b2fc5aac6b810",
     "is_solution": false,
     "is_tests": false,
     "readonly": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": []
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 5
}